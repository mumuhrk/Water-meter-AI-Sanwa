import os, sys, cv2, numpy as np, traceback, uuid, threading, time, json, hashlib, random, platform
from flask import Flask, request, abort, jsonify
from flask_cors import CORS

# --- 1. ‡∏™‡πà‡∏ß‡∏ô Import ‡∏Ç‡∏≠‡∏á LINE SDK ---
from linebot.v3 import WebhookHandler
from linebot.v3.exceptions import InvalidSignatureError
from linebot.v3.messaging import (
    Configuration, ApiClient, MessagingApi,
    ReplyMessageRequest, TextMessage
)
from linebot.v3.webhooks import (
    MessageEvent, TextMessageContent, ImageMessageContent
)

# --- 2. ‡∏™‡πà‡∏ß‡∏ô Import ‡∏Ç‡∏≠‡∏á AI ---
try:
    from WMDP import read_water_meter
    print("INFO: Successfully loaded 'read_water_meter' from WMDP.py")
except ImportError:
    print("ERROR: WMDP.py not found or failed to import.")
    sys.exit(1)


# --- 3. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Flask App ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á ---
app = Flask(__name__)
CORS(app)

configuration = Configuration(access_token='GxQHa5n02D5+7m26nUE4uAOZxCI+xcZH0q+R8qipoRv285ftqsus24MIVsGggqbsJpY1cmKHZ5A6ULf70GjB+VXImKfIX8SCzH/j6WZ1Mj3uot/p18S7XDyi/+bZ/hmuazrHhQz0U2algMqZA7fpMgdB04t89/1O/w1cDnyilFU=')
handler = WebhookHandler('28a91b4bff1a14931c6124b347cd7d8b')

# --- Seed ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° reproducible ---
try:
    import torch
    torch.manual_seed(42)
    if torch.cuda.is_available():
        torch.backends.cudnn.deterministic = True
        torch.backends.cudnn.benchmark = False
except ImportError:
    pass
np.random.seed(42)
random.seed(42)

# --- Debug: Log Environment ---
def log_environment():
    try:
        import torch
        torch_version = torch.__version__
    except ImportError:
        torch_version = "not-installed"

    print("===== DEBUG ENVIRONMENT =====")
    print(f"torch={torch_version}")
    print(f"cv2={cv2.__version__}")
    print(f"numpy={np.__version__}")
    print(f"python={platform.python_version()}")
    print(f"system={platform.system()}")
    print("=============================")

log_environment()

# --- Helper: Compute SHA256 of bytes ---
def sha256_bytes(b: bytes) -> str:
    return hashlib.sha256(b).hexdigest()

# --- 4. ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Web API ---
TASKS = {}
def process_image_for_web(task_id, image_opencv):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡πá‡∏ö"""
    def update_progress(message):
        TASKS[task_id]['progress'] = message
    try:
        TASKS[task_id]['status'] = 'processing'
        result_dict = read_water_meter(image_opencv, update_status=update_progress)
        TASKS[task_id]['status'] = 'complete'
        TASKS[task_id]['result'] = result_dict
    except Exception as e:
        TASKS[task_id]['status'] = 'error'
        TASKS[task_id]['error_message'] = str(e)

# --- 5. API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö (‡πÅ‡∏ö‡∏ö‡∏°‡∏µ Progress) ---
@app.route("/submit_task", methods=['POST'])
def submit_task():
    if 'image' not in request.files: return jsonify({"error": "No image file"}), 400
    file = request.files['image']
    image_bytes = file.read()
    image_np_array = np.frombuffer(image_bytes, np.uint8)
    image_opencv = cv2.imdecode(image_np_array, cv2.IMREAD_COLOR)
    task_id = str(uuid.uuid4())
    TASKS[task_id] = {'status': 'queued', 'progress': 'queued'}
    thread = threading.Thread(target=process_image_for_web, args=(task_id, image_opencv))
    thread.start()
    return jsonify({"task_id": task_id}), 202

@app.route("/task_status/<task_id>", methods=['GET'])
def get_task_status(task_id):
    task = TASKS.get(task_id)
    if not task: return jsonify({"error": "Task not found"}), 404
    return jsonify(task)


# --- 6. API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE Bot (‡πÅ‡∏ö‡∏ö Monolith ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß) ---
@app.route("/webhook", methods=['POST'])
def webhook():
    signature = request.headers.get('X-Line-Signature', '')
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    except Exception as e:
        app.logger.error(f"Webhook handler error: {traceback.format_exc()}")
        abort(500)
    return 'OK'

@handler.add(MessageEvent, message=ImageMessageContent)
def handle_image_message(event):
    start_time = time.time()
    try:
        with ApiClient(configuration) as api_client:
            resource_path = f'/v2/bot/message/{event.message.id}/content'
            http_response = api_client.call_api(
                resource_path, 'GET', response_types_map={ 200: "file" },
                auth_settings=['Bearer'], _return_http_data_only=False,
                _preload_content=False, _host="https://api-data.line.me"
            )
            message_content = http_response.raw_data
            
            # --- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å LINE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ Debug (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ) ---
            debug_dir = "received_from_line"
            if not os.path.exists(debug_dir):
                os.makedirs(debug_dir)
            file_path = os.path.join(debug_dir, f"{event.message.id}.jpg")
            with open(file_path, "wb") as f:
                f.write(message_content)
            print(f"DEBUG: Saved incoming image to {file_path}")
            # --- ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå ---

            image_np_array = np.frombuffer(message_content, np.uint8)
            image_opencv = cv2.imdecode(image_np_array, cv2.IMREAD_COLOR)
            result_dict = read_water_meter(image_opencv, update_status=lambda msg: print(f"[WMDP] {msg}"))
            
            final_reading_display = None
            error_message = None
            if isinstance(result_dict, dict):
                error_message = result_dict.get('error')
                final_reading = result_dict.get('final_reading')
                if error_message:
                    final_reading_display = None
                else:
                    if final_reading is None:
                        final_reading_display = None
                    else:
                        final_reading_display = str(final_reading)
            else:
                error_message = str(result_dict)
                final_reading_display = None

            if error_message:
                reply_message_text = f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥:\n{error_message}"
            else:
                if final_reading_display is None:
                    reply_message_text = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô (‡∏ú‡∏•‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô)"
                else:
                    reply_message_text = f"Water meter reading:\n{final_reading_display}"

            end_time = time.time()
            processing_duration = (end_time - start_time) * 1000
            print(f"AppAPI LATENCY_DATA: {{'server_processing_time_ms': {processing_duration:.2f}}}")
            
            line_bot_api = MessagingApi(api_client)
            line_bot_api.reply_message(
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text=reply_message_text)]
                )
            )
    except Exception as e:
        app.logger.error(f"AN EXCEPTION OCCURRED in LINE Handler:\n{traceback.format_exc()}")


@handler.add(MessageEvent, message=TextMessageContent)
def handle_text_message(event):
    user_text = event.message.text.strip().lower()
    reply_text = ''
    if user_text == 'help':
        reply_text = "üì∏ How to Use üì∏\n\n1. Take a clear picture of the water meter...\n2. Send the picture...\n3. Please wait a moment...\n4. The system will reply with the reading."
    elif user_text == 'credits':
        reply_text = "Developed by:\nMr. Sujinda...\nAdvisor:\nAsst. Prof. Dr. Khwanchai Ueaviriyanukul"
    else:
        reply_text = 'Please send a picture of a water meter for the AI to process, or try typing "help".'
    
    with ApiClient(configuration) as api_client:
        line_bot_api = MessagingApi(api_client)
        line_bot_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=reply_text)]
            )
        )

# --- 7. API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Debugging (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà) ---
# Endpoint ‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Local ‡πÅ‡∏•‡∏∞ Cloud Run
# ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ Debug ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
@app.route('/run-debug-analysis', methods=['GET'])
def run_debug_analysis():
    """
    Endpoint ‡∏ô‡∏µ‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å ‡∏à‡∏∞‡∏™‡∏±‡πà‡∏á‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô JSON
    """
    # --- Helper Functions (‡∏¢‡∏Å‡∏°‡∏≤‡∏à‡∏≤‡∏Å debug_compare.py) ---
    def set_deterministic_seed(seed=42):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Seed ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô (Deterministic)"""
        import random
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ torch ‡∏°‡∏µ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ
        try:
            import torch
            torch.manual_seed(seed)
            if torch.cuda.is_available():
                torch.backends.cudnn.deterministic = True
                torch.backends.cudnn.benchmark = False
        except ImportError:
            print("DEBUG: PyTorch not found, skipping torch-related seed settings.")
            pass
        np.random.seed(seed)
        random.seed(seed)

    def log_model_outputs_for_debug(image_path):
        """
        ‡∏£‡∏±‡∏ô Inference ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô Dictionary
        ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏• WMDP ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        """
        print(f"DEBUG: Running inference on: {image_path}")
        if not os.path.exists(image_path):
            return {"error": f"Image not found at {image_path}"}
        
        image_cv2 = cv2.imread(image_path)
        if image_cv2 is None:
            return {"error": f"Could not read image at {image_path}"}
        
        result_dict = read_water_meter(image_cv2, update_status=lambda msg: print(f"[Debug WMDP] {msg}"))
        return result_dict

    # --- Main Logic ‡∏Ç‡∏≠‡∏á Endpoint ---
    try:
        # --- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Configuration ---
        ORIGINAL_IMAGE_PATH = "test_images/orig_001.jpg"
        RECEIVED_IMAGE_PATH = "received_from_line/line_msg_id_123.jpg"

        print("--- DEBUG: Setting up environment for deterministic results ---")
        set_deterministic_seed()
        
        results_orig = log_model_outputs_for_debug(ORIGINAL_IMAGE_PATH)
        results_rec = log_model_outputs_for_debug(RECEIVED_IMAGE_PATH)

        return jsonify({
            "status": "Debug successful",
            "environment": "Google Cloud Run",
            "results_from_original_image": results_orig,
            "results_from_received_image": results_rec
        })

    except Exception as e:
        print(f"AN EXCEPTION OCCURRED in Debug Endpoint:\n{traceback.format_exc()}")
        return jsonify({"status": "error", "message": str(e)}), 500

# --- Run Application ---
if __name__ == "__main__":
    app.run(port=5000, debug=True)